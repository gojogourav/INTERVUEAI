generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  RUNNING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILE_ERROR
  INTERNAL_ERROR
}

enum ProgrammingLanguage {
  JAVASCRIPT
  PYTHON
  JAVA
  CPP
  CSHARP
  GO
  RUST
  TYPESCRIPT
}

enum QuestionType {
  CODING
  MCQ
  SYSTEM_DESIGN
}

model User {
  id             String    @id @default(uuid())
  name           String
  username       String    @unique
  hashedPassword String
  email          String    @unique
  avatarUrl      String?
  bio            String?
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  createdInterviews Interview[]        @relation("InterviewCreator")
  attempts          InterviewAttempt[]
  submissions       Submission[]
  profiles          UserProfile[]

  @@index([email])
  @@map("users")
}

model UserProfile {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  company         String?
  position        String?
  experienceYears Int?
  skills          String[]              @default([])
  preferredLangs  ProgrammingLanguage[]
  githubUsername  String?
  linkedinUrl     String?
  resumeUrl       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@map("user_profiles")
}

model Interview {
  id          String  @id @default(uuid())
  title       String
  description String?
  slug        String  @unique
  isPublic    Boolean @default(false)

  durationMinutes Int    @default(30)
  passingScore    Float? @default(70.0)
  maxAttempts     Int?   @default(3)

  company       String?
  tags          String[]
  totalAttempts Int      @default(0)
  totalPassed   Int      @default(0)

  creatorId      String
  creator        User                @relation("InterviewCreator", fields: [creatorId], references: [id])
  totalQuestions Int                 @default(3)
  questions      InterviewQuestion[]
  attempts       InterviewAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([creatorId])
  @@index([company])
  @@map("interviews")
}

model InterviewQuestion {
  id               String    @id @default(uuid())
  interviewId      String
  interview        Interview @relation(fields: [interviewId], references: [id])
  questionId       String
  question         Question  @relation(fields: [questionId], references: [id])
  order            Int
  points           Float?
  timeLimitMinutes Int       @default(15)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([interviewId, questionId])
  @@unique([interviewId, order])
  @@index([questionId])
  @@map("interview_questions")
}

model InterviewAttempt {
  id                 String    @id @default(uuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  attemptedInterview Interview @relation(fields: [interviewId], references: [id])
  interviewId        String
  score              Float?
  startedAt          DateTime?
  completedAt        DateTime?
  timeTakenInMinutes Int?
  feedback           String?

  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, interviewId])
  @@map("interview_attempts")
}

model Question {
  id                          String                @id @default(uuid())
  title                       String
  questionType                QuestionType
  difficulty                  Difficulty            @default(MEDIUM)
  tags                        String[]
  //only one of these bad boys will not be null
  oaQuestionDetails           OaQuestion?
  oaQuestionId                String?               @unique
  mcqQuestionDetails          MCQQuestion?
  mcqQuestionId               String?               @unique
  systemDesignQuestionDetails SystemDesignQuestion?
  systemDesignQuestionId      String?               @unique

  maxScore  Int      @default(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentInterviews InterviewQuestion[]
  submissions      Submission[]

  @@index([questionType])
  @@index([difficulty])
  @@map("questions")
}

model Submission {
  id                 String           @id @default(uuid())
  userId             String
  user               User             @relation(fields: [userId], references: [id])
  questionId         String
  question           Question         @relation(fields: [questionId], references: [id])
  interviewAttemptId String
  interviewAttempt   InterviewAttempt @relation(fields: [interviewAttemptId], references: [id])
  score              Float?
  feedback           String?
  submittedAt        DateTime         @default(now())
}

model OaQuestion {
  id          String   @id @default(uuid())
  points      Int      @default(40)
  title       String
  description String
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String   @unique

  constrains  String?
  starterCode Json?
  aiHints     Json? //trigger if stuck for 10 minutes 
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coding_questions")
}

model MCQQuestion {
  id                   String  @id @default(uuid())
  points               Int     @default(30)
  questionText         String
  options              Json
  explanation          String?
  allowMultipleAnswers Boolean @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @unique

  @@map("mcq_questions")
}

model SystemDesignQuestion {
  id                  String  @id @default(uuid())
  points              Int     @default(30)
  prompt              String
  evaluationCriteria  String?
  initialDiagramState Json? //top pe question title and description
  aiAnalysis          Json?
  drawingData         Json?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @unique

  @@map("system_design_questions")
}
